using UnityEngine;

namespace homehelp.Events
{
    [CreateAssetMenu(menuName = "Variable/_className_", fileName = "New _className_ Variable")]
    public class _className_Variable : ScriptableObject
    {
        public enum GameEventType
        {
            _className_,
            Void,
            _className_AndVoid
        }

        public GameEventType gameEventType;
        public GameEvent_className_ changedEvent_className_;
        public GameEventVoid changedEventVoid;

        [SerializeField] private _className_ value;
        public _className_ Value
        {
            get
            {
                return value;
            }
            set
            {
                SetValue(value);
            }
        }

        public void SetValue(_className_ value) // é necessário pois poderá ser chamado a parte depois
        {
            this.value = value;

            if (changedEvent_className_ != null)
            {

                switch (gameEventType)
                {
                    case GameEventType._className_:
                        if (changedEvent_className_ != null)
                        {
                            changedEvent_className_.Raise(value);
                        }
                        break;
                    case GameEventType.Void:
                        if (changedEventVoid != null)
                        {
                            changedEventVoid.Raise();
                        }
                        break;
                    default:
                        if (changedEvent_className_ != null && changedEventVoid != null)
                        {
                            changedEventVoid.Raise();
                            changedEvent_className_.Raise(value);
                        }
                        break;
                }
            }
        }

        public static implicit operator _className_(_className_Variable variable)
        {
            return variable.Value;
        }
    }
}
